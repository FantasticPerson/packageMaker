// Generated by CoffeeScript 1.9.3
(function() {
  var callFunction, errorToMeta, ipc, objectsRegistry, path, unwrapArgs, v8Util, valueToMeta;

  ipc = require('ipc');

  path = require('path');

  objectsRegistry = require('./objects-registry.js');

  v8Util = process.atomBinding('v8_util');

  valueToMeta = function(sender, value, optimizeSimpleObject) {
    var el, field, i, len, meta, prop;
    if (optimizeSimpleObject == null) {
      optimizeSimpleObject = false;
    }
    meta = {
      type: typeof value
    };
    if (Buffer.isBuffer(value)) {
      meta.type = 'buffer';
    }
    if (value === null) {
      meta.type = 'value';
    }
    if (Array.isArray(value)) {
      meta.type = 'array';
    }
    if ((value != null) && value.constructor.name === 'Promise') {
      meta.type = 'promise';
    }
    if (optimizeSimpleObject && meta.type === 'object' && v8Util.getHiddenValue(value, 'simple')) {
      meta.type = 'value';
    }
    if (meta.type === 'object' && (value.callee != null) && (value.length != null)) {
      meta.type = 'array';
    }
    if (meta.type === 'array') {
      meta.members = [];
      for (i = 0, len = value.length; i < len; i++) {
        el = value[i];
        meta.members.push(valueToMeta(sender, el));
      }
    } else if (meta.type === 'object' || meta.type === 'function') {
      meta.name = value.constructor.name;
      meta.id = objectsRegistry.add(sender.getId(), value);
      meta.members = [];
      for (prop in value) {
        field = value[prop];
        meta.members.push({
          name: prop,
          type: typeof field
        });
      }
    } else if (meta.type === 'buffer') {
      meta.value = Array.prototype.slice.call(value, 0);
    } else if (meta.type === 'promise') {
      meta.then = valueToMeta(sender, value.then.bind(value));
    } else {
      meta.type = 'value';
      meta.value = value;
    }
    return meta;
  };

  errorToMeta = function(error) {
    return {
      type: 'error',
      message: error.message,
      stack: error.stack || error
    };
  };

  unwrapArgs = function(sender, args) {
    var metaToValue;
    metaToValue = function(meta) {
      var i, len, member, ref, rendererReleased, ret, returnValue;
      switch (meta.type) {
        case 'value':
          return meta.value;
        case 'remote-object':
          return objectsRegistry.get(meta.id);
        case 'array':
          return unwrapArgs(sender, meta.value);
        case 'buffer':
          return new Buffer(meta.value);
        case 'promise':
          return Promise.resolve({
            then: metaToValue(meta.then)
          });
        case 'object':
          ret = v8Util.createObjectWithName(meta.name);
          ref = meta.members;
          for (i = 0, len = ref.length; i < len; i++) {
            member = ref[i];
            ret[member.name] = metaToValue(member.value);
          }
          return ret;
        case 'function-with-return-value':
          returnValue = metaToValue(meta.value);
          return function() {
            return returnValue;
          };
        case 'function':
          rendererReleased = false;
          objectsRegistry.once("clear-" + (sender.getId()), function() {
            return rendererReleased = true;
          });
          ret = function() {
            if (rendererReleased) {
              throw new Error('Calling a callback of released renderer view');
            }
            return sender.send('ATOM_RENDERER_CALLBACK', meta.id, valueToMeta(sender, arguments));
          };
          v8Util.setDestructor(ret, function() {
            if (rendererReleased) {
              return;
            }
            return sender.send('ATOM_RENDERER_RELEASE_CALLBACK', meta.id);
          });
          return ret;
        default:
          throw new TypeError("Unknown type: " + meta.type);
      }
    };
    return args.map(metaToValue);
  };

  callFunction = function(event, func, caller, args) {
    var ret;
    if (v8Util.getHiddenValue(func, 'asynchronous') && typeof args[args.length - 1] !== 'function') {
      args.push(function(ret) {
        return event.returnValue = valueToMeta(event.sender, ret, true);
      });
      return func.apply(caller, args);
    } else {
      ret = func.apply(caller, args);
      return event.returnValue = valueToMeta(event.sender, ret, true);
    }
  };

  process.on('ATOM_BROWSER_RELEASE_RENDER_VIEW', function(id) {
    return objectsRegistry.clear(id);
  });

  ipc.on('ATOM_BROWSER_REQUIRE', function(event, module) {
    var e;
    try {
      return event.returnValue = valueToMeta(event.sender, process.mainModule.require(module));
    } catch (_error) {
      e = _error;
      return event.returnValue = errorToMeta(e);
    }
  });

  ipc.on('ATOM_BROWSER_GLOBAL', function(event, name) {
    var e;
    try {
      return event.returnValue = valueToMeta(event.sender, global[name]);
    } catch (_error) {
      e = _error;
      return event.returnValue = errorToMeta(e);
    }
  });

  ipc.on('ATOM_BROWSER_CURRENT_WINDOW', function(event, guestInstanceId) {
    var BrowserWindow, e, guestViewManager, window;
    try {
      BrowserWindow = require('browser-window');
      if (guestInstanceId != null) {
        guestViewManager = require('./guest-view-manager');
        window = BrowserWindow.fromWebContents(guestViewManager.getEmbedder(guestInstanceId));
      } else {
        window = BrowserWindow.fromWebContents(event.sender);
        if (window == null) {
          window = BrowserWindow.fromDevToolsWebContents(event.sender);
        }
      }
      return event.returnValue = valueToMeta(event.sender, window);
    } catch (_error) {
      e = _error;
      return event.returnValue = errorToMeta(e);
    }
  });

  ipc.on('ATOM_BROWSER_CURRENT_WEB_CONTENTS', function(event) {
    return event.returnValue = valueToMeta(event.sender, event.sender);
  });

  ipc.on('ATOM_BROWSER_CONSTRUCTOR', function(event, id, args) {
    var constructor, e, obj;
    try {
      args = unwrapArgs(event.sender, args);
      constructor = objectsRegistry.get(id);
      obj = new (Function.prototype.bind.apply(constructor, [null].concat(args)));
      return event.returnValue = valueToMeta(event.sender, obj);
    } catch (_error) {
      e = _error;
      return event.returnValue = errorToMeta(e);
    }
  });

  ipc.on('ATOM_BROWSER_FUNCTION_CALL', function(event, id, args) {
    var e, func;
    try {
      args = unwrapArgs(event.sender, args);
      func = objectsRegistry.get(id);
      return callFunction(event, func, global, args);
    } catch (_error) {
      e = _error;
      return event.returnValue = errorToMeta(e);
    }
  });

  ipc.on('ATOM_BROWSER_MEMBER_CONSTRUCTOR', function(event, id, method, args) {
    var constructor, e, obj;
    try {
      args = unwrapArgs(event.sender, args);
      constructor = objectsRegistry.get(id)[method];
      obj = new (Function.prototype.bind.apply(constructor, [null].concat(args)));
      return event.returnValue = valueToMeta(event.sender, obj);
    } catch (_error) {
      e = _error;
      return event.returnValue = errorToMeta(e);
    }
  });

  ipc.on('ATOM_BROWSER_MEMBER_CALL', function(event, id, method, args) {
    var e, obj;
    try {
      args = unwrapArgs(event.sender, args);
      obj = objectsRegistry.get(id);
      return callFunction(event, obj[method], obj, args);
    } catch (_error) {
      e = _error;
      return event.returnValue = errorToMeta(e);
    }
  });

  ipc.on('ATOM_BROWSER_MEMBER_SET', function(event, id, name, value) {
    var e, obj;
    try {
      obj = objectsRegistry.get(id);
      obj[name] = value;
      return event.returnValue = null;
    } catch (_error) {
      e = _error;
      return event.returnValue = errorToMeta(e);
    }
  });

  ipc.on('ATOM_BROWSER_MEMBER_GET', function(event, id, name) {
    var e, obj;
    try {
      obj = objectsRegistry.get(id);
      return event.returnValue = valueToMeta(event.sender, obj[name]);
    } catch (_error) {
      e = _error;
      return event.returnValue = errorToMeta(e);
    }
  });

  ipc.on('ATOM_BROWSER_DEREFERENCE', function(event, id) {
    return objectsRegistry.remove(event.sender.getId(), id);
  });

  ipc.on('ATOM_BROWSER_GUEST_WEB_CONTENTS', function(event, guestInstanceId) {
    var e, guestViewManager;
    try {
      guestViewManager = require('./guest-view-manager');
      return event.returnValue = valueToMeta(event.sender, guestViewManager.getGuest(guestInstanceId));
    } catch (_error) {
      e = _error;
      return event.returnValue = errorToMeta(e);
    }
  });

}).call(this);
