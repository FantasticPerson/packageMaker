// Generated by CoffeeScript 1.9.3
(function() {
  var BrowserWindow, EventEmitter, app, ipc;

  EventEmitter = require('events').EventEmitter;

  app = require('app');

  ipc = require('ipc');

  BrowserWindow = process.atomBinding('window').BrowserWindow;

  BrowserWindow.prototype.__proto__ = EventEmitter.prototype;

  BrowserWindow.prototype._init = function() {
    var menu;
    if (process.platform !== 'darwin') {
      menu = app.getApplicationMenu();
      if (menu != null) {
        this.setMenu(menu);
      }
    }
    this.webContents.on('-new-window', function(event, url, frameName) {
      var options;
      options = {
        show: true,
        width: 800,
        height: 600
      };
      return ipc.emit('ATOM_SHELL_GUEST_WINDOW_MANAGER_WINDOW_OPEN', event, url, frameName, options);
    });
    this.webContents.on('move', (function(_this) {
      return function(event, size) {
        return _this.setBounds(size);
      };
    })(this));
    this.webContents.on('activate', (function(_this) {
      return function() {
        if (process.platform !== 'darwin' && _this.isMenuBarAutoHide() && _this.isMenuBarVisible()) {
          return _this.setMenuBarVisibility(false);
        }
      };
    })(this));
    this.webContents.on('crashed', (function(_this) {
      return function() {
        return _this.emit('crashed');
      };
    })(this));
    this.webContents.once('load-url', function() {
      return this.focus();
    });
    this.on('blur', (function(_this) {
      return function(event) {
        return app.emit('browser-window-blur', event, _this);
      };
    })(this));
    return this.on('focus', (function(_this) {
      return function(event) {
        return app.emit('browser-window-focus', event, _this);
      };
    })(this));
  };

  BrowserWindow.getFocusedWindow = function() {
    var i, len, window, windows;
    windows = BrowserWindow.getAllWindows();
    for (i = 0, len = windows.length; i < len; i++) {
      window = windows[i];
      if (window.isFocused()) {
        return window;
      }
    }
  };

  BrowserWindow.fromWebContents = function(webContents) {
    var i, len, ref, window, windows;
    windows = BrowserWindow.getAllWindows();
    for (i = 0, len = windows.length; i < len; i++) {
      window = windows[i];
      if ((ref = window.webContents) != null ? ref.equal(webContents) : void 0) {
        return window;
      }
    }
  };

  BrowserWindow.fromDevToolsWebContents = function(webContents) {
    var i, len, ref, window, windows;
    windows = BrowserWindow.getAllWindows();
    for (i = 0, len = windows.length; i < len; i++) {
      window = windows[i];
      if ((ref = window.devToolsWebContents) != null ? ref.equal(webContents) : void 0) {
        return window;
      }
    }
  };

  BrowserWindow.prototype.loadUrl = function() {
    return this.webContents.loadUrl.apply(this.webContents, arguments);
  };

  BrowserWindow.prototype.send = function() {
    return this.webContents.send.apply(this.webContents, arguments);
  };

  BrowserWindow.prototype.undo = function() {
    return this.webContents.undo();
  };

  BrowserWindow.prototype.redo = function() {
    return this.webContents.redo();
  };

  BrowserWindow.prototype.cut = function() {
    return this.webContents.cut();
  };

  BrowserWindow.prototype.copy = function() {
    return this.webContents.copy();
  };

  BrowserWindow.prototype.paste = function() {
    return this.webContents.paste();
  };

  BrowserWindow.prototype.selectAll = function() {
    return this.webContents.selectAll();
  };

  BrowserWindow.prototype.restart = function() {
    return this.webContents.reload();
  };

  BrowserWindow.prototype.getUrl = function() {
    return this.webContents.getUrl();
  };

  BrowserWindow.prototype.reload = function() {
    return this.webContents.reload.apply(this.webContents, arguments);
  };

  BrowserWindow.prototype.reloadIgnoringCache = function() {
    return this.webContents.reloadIgnoringCache.apply(this.webContents, arguments);
  };

  BrowserWindow.prototype.getPageTitle = function() {
    return this.webContents.getTitle();
  };

  BrowserWindow.prototype.isLoading = function() {
    return this.webContents.isLoading();
  };

  BrowserWindow.prototype.isWaitingForResponse = function() {
    return this.webContents.isWaitingForResponse();
  };

  BrowserWindow.prototype.stop = function() {
    return this.webContents.stop();
  };

  BrowserWindow.prototype.isCrashed = function() {
    return this.webContents.isCrashed();
  };

  BrowserWindow.prototype.executeJavaScriptInDevTools = function(code) {
    var ref;
    return (ref = this.devToolsWebContents) != null ? ref.executeJavaScript(code) : void 0;
  };

  BrowserWindow.prototype.openDevTools = function() {
    return this.webContents.openDevTools.apply(this.webContents, arguments);
  };

  BrowserWindow.prototype.closeDevTools = function() {
    return this.webContents.closeDevTools();
  };

  BrowserWindow.prototype.isDevToolsOpened = function() {
    return this.webContents.isDevToolsOpened();
  };

  BrowserWindow.prototype.toggleDevTools = function() {
    return this.webContents.toggleDevTools();
  };

  BrowserWindow.prototype.inspectElement = function() {
    return this.webContents.inspectElement.apply(this.webContents, arguments);
  };

  BrowserWindow.prototype.inspectServiceWorker = function() {
    return this.webContents.inspectServiceWorker();
  };

  BrowserWindow.prototype.print = function() {
    return this.webContents.print.apply(this.webContents, arguments);
  };

  BrowserWindow.prototype.printToPDF = function() {
    return this.webContents.printToPDF.apply(this.webContents, arguments);
  };

  module.exports = BrowserWindow;

}).call(this);
