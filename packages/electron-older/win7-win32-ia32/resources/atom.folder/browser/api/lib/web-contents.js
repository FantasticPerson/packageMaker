// Generated by CoffeeScript 1.9.3
(function() {
  var EventEmitter, NavigationController, PDFPageSize, binding, getNextId, ipc, nextId, wrapWebContents,
    slice = [].slice;

  EventEmitter = require('events').EventEmitter;

  NavigationController = require('./navigation-controller');

  binding = process.atomBinding('web_contents');

  ipc = require('ipc');

  nextId = 0;

  getNextId = function() {
    return ++nextId;
  };

  PDFPageSize = {
    A4: {
      custom_display_name: "A4",
      height_microns: 297000,
      name: "ISO_A4",
      is_default: "true",
      width_microns: 210000
    },
    A3: {
      custom_display_name: "A3",
      height_microns: 420000,
      name: "ISO_A3",
      width_microns: 297000
    },
    Legal: {
      custom_display_name: "Legal",
      height_microns: 355600,
      name: "NA_LEGAL",
      width_microns: 215900
    },
    Letter: {
      custom_display_name: "Letter",
      height_microns: 279400,
      name: "NA_LETTER",
      width_microns: 215900
    },
    Tabloid: {
      height_microns: 431800,
      name: "NA_LEDGER",
      width_microns: 279400,
      custom_display_name: "Tabloid"
    }
  };

  wrapWebContents = function(webContents) {
    var controller, method, name, ref;
    webContents.__proto__ = EventEmitter.prototype;
    webContents.send = function() {
      var args, channel;
      channel = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      return this._send(channel, slice.call(args));
    };
    webContents.loaded = false;
    webContents.once('did-finish-load', function() {
      return this.loaded = true;
    });
    webContents.executeJavaScript = function(code, hasUserGesture) {
      if (hasUserGesture == null) {
        hasUserGesture = false;
      }
      if (this.loaded) {
        return this._executeJavaScript(code, hasUserGesture);
      } else {
        return webContents.once('did-finish-load', this._executeJavaScript.bind(this, code, hasUserGesture));
      }
    };
    controller = new NavigationController(webContents);
    ref = NavigationController.prototype;
    for (name in ref) {
      method = ref[name];
      if (method instanceof Function) {
        (function(name, method) {
          return webContents[name] = function() {
            return method.apply(controller, arguments);
          };
        })(name, method);
      }
    }
    webContents.on('ipc-message', function(event, packed) {
      var args, channel;
      channel = packed[0], args = 2 <= packed.length ? slice.call(packed, 1) : [];
      return ipc.emit.apply(ipc, [channel, event].concat(slice.call(args)));
    });
    webContents.on('ipc-message-sync', function(event, packed) {
      var args, channel;
      channel = packed[0], args = 2 <= packed.length ? slice.call(packed, 1) : [];
      Object.defineProperty(event, 'returnValue', {
        set: function(value) {
          return event.sendReply(JSON.stringify(value));
        }
      });
      return ipc.emit.apply(ipc, [channel, event].concat(slice.call(args)));
    });
    return webContents.printToPDF = function(options, callback) {
      var printingSetting;
      printingSetting = {
        pageRage: [],
        mediaSize: {},
        landscape: false,
        color: 2,
        headerFooterEnabled: false,
        marginsType: 0,
        isFirstRequest: false,
        requestID: getNextId(),
        previewModifiable: true,
        printToPDF: true,
        printWithCloudPrint: false,
        printWithPrivet: false,
        printWithExtension: false,
        deviceName: "Save as PDF",
        generateDraftData: true,
        fitToPageEnabled: false,
        duplex: 0,
        copies: 1,
        collate: true,
        shouldPrintBackgrounds: false,
        shouldPrintSelectionOnly: false
      };
      if (options.landscape) {
        printingSetting.landscape = options.landscape;
      }
      if (options.marginsType) {
        printingSetting.marginsType = options.marginsType;
      }
      if (options.printSelectionOnly) {
        printingSetting.shouldPrintSelectionOnly = options.printSelectionOnly;
      }
      if (options.printBackground) {
        printingSetting.shouldPrintBackgrounds = options.printBackground;
      }
      if (options.pageSize && PDFPageSize[options.pageSize]) {
        printingSetting.mediaSize = PDFPageSize[options.pageSize];
      } else {
        printingSetting.mediaSize = PDFPageSize['A4'];
      }
      return this._printToPDF(printingSetting, callback);
    };
  };

  binding._setWrapWebContents(wrapWebContents);

  process.once('exit', binding._clearWrapWebContents);

  module.exports.create = function(options) {
    if (options == null) {
      options = {};
    }
    return binding.create(options);
  };

}).call(this);
