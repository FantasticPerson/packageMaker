// Generated by CoffeeScript 1.9.3
(function() {
  var BrowserWindow, createGuest, frameToGuest, ipc, v8Util,
    slice = [].slice;

  ipc = require('ipc');

  v8Util = process.atomBinding('v8_util');

  BrowserWindow = require('browser-window');

  frameToGuest = {};

  createGuest = function(embedder, url, frameName, options) {
    var closedByEmbedder, closedByUser, guest;
    guest = frameToGuest[frameName];
    if (frameName && (guest != null)) {
      guest.loadUrl(url);
      return guest.id;
    }
    guest = new BrowserWindow(options);
    guest.loadUrl(url);
    v8Util.setHiddenValue(guest.webContents, 'embedder', embedder);
    closedByEmbedder = function() {
      guest.removeListener('closed', closedByUser);
      return guest.destroy();
    };
    closedByUser = function() {
      embedder.send('ATOM_SHELL_GUEST_WINDOW_MANAGER_WINDOW_CLOSED', guest.id);
      return embedder.removeListener('render-view-deleted', closedByEmbedder);
    };
    embedder.once('render-view-deleted', closedByEmbedder);
    guest.once('closed', closedByUser);
    if (frameName) {
      frameToGuest[frameName] = guest;
      guest.frameName = frameName;
      guest.once('closed', function() {
        return delete frameToGuest[frameName];
      });
    }
    return guest.id;
  };

  ipc.on('ATOM_SHELL_GUEST_WINDOW_MANAGER_WINDOW_OPEN', function() {
    var args, event, frameName, options, url;
    event = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    url = args[0], frameName = args[1], options = args[2];
    event.sender.emit('new-window', event, url, frameName, 'new-window');
    if (event.sender.isGuest() || event.defaultPrevented) {
      return event.returnValue = null;
    } else {
      return event.returnValue = createGuest.apply(null, [event.sender].concat(slice.call(args)));
    }
  });

  ipc.on('ATOM_SHELL_GUEST_WINDOW_MANAGER_WINDOW_CLOSE', function(event, guestId) {
    var ref;
    return (ref = BrowserWindow.fromId(guestId)) != null ? ref.destroy() : void 0;
  });

  ipc.on('ATOM_SHELL_GUEST_WINDOW_MANAGER_WINDOW_METHOD', function() {
    var args, event, guestId, method, ref;
    event = arguments[0], guestId = arguments[1], method = arguments[2], args = 4 <= arguments.length ? slice.call(arguments, 3) : [];
    return (ref = BrowserWindow.fromId(guestId)) != null ? ref[method].apply(ref, args) : void 0;
  });

  ipc.on('ATOM_SHELL_GUEST_WINDOW_MANAGER_WINDOW_POSTMESSAGE', function(event, guestId, message, targetOrigin) {
    var guestContents, ref;
    guestContents = (ref = BrowserWindow.fromId(guestId)) != null ? ref.webContents : void 0;
    if ((guestContents != null ? guestContents.getUrl().indexOf(targetOrigin) : void 0) === 0 || targetOrigin === '*') {
      return guestContents.send('ATOM_SHELL_GUEST_WINDOW_POSTMESSAGE', message, targetOrigin);
    }
  });

  ipc.on('ATOM_SHELL_GUEST_WINDOW_MANAGER_WINDOW_OPENER_POSTMESSAGE', function(event, guestId, message, targetOrigin, sourceOrigin) {
    var embedder;
    embedder = v8Util.getHiddenValue(event.sender, 'embedder');
    if ((embedder != null ? embedder.getUrl().indexOf(targetOrigin) : void 0) === 0 || targetOrigin === '*') {
      return embedder.send('ATOM_SHELL_GUEST_WINDOW_POSTMESSAGE', guestId, message, sourceOrigin);
    }
  });

  ipc.on('ATOM_SHELL_GUEST_WINDOW_MANAGER_WEB_CONTENTS_METHOD', function() {
    var args, event, guestId, method, ref, ref1;
    event = arguments[0], guestId = arguments[1], method = arguments[2], args = 4 <= arguments.length ? slice.call(arguments, 3) : [];
    return (ref = BrowserWindow.fromId(guestId)) != null ? (ref1 = ref.webContents) != null ? ref1[method].apply(ref1, args) : void 0 : void 0;
  });

  ipc.on('ATOM_SHELL_GUEST_WINDOW_MANAGER_GET_GUEST_ID', function(event) {
    var embedder, guest;
    embedder = v8Util.getHiddenValue(event.sender, 'embedder');
    if (embedder != null) {
      guest = BrowserWindow.fromWebContents(event.sender);
      if (guest != null) {
        event.returnValue = guest.id;
        return;
      }
    }
    return event.returnValue = null;
  });

}).call(this);
