// Generated by CoffeeScript 1.9.3
(function() {
  var NavigationController, ipc,
    slice = [].slice;

  ipc = require('ipc');

  ipc.on('ATOM_SHELL_NAVIGATION_CONTROLLER', function() {
    var args, event, method, ref;
    event = arguments[0], method = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
    return (ref = event.sender)[method].apply(ref, args);
  });

  ipc.on('ATOM_SHELL_SYNC_NAVIGATION_CONTROLLER', function() {
    var args, event, method, ref;
    event = arguments[0], method = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
    return event.returnValue = (ref = event.sender)[method].apply(ref, args);
  });

  NavigationController = (function() {
    function NavigationController(webContents) {
      this.webContents = webContents;
      this.clearHistory();
      this.webContents.on('navigation-entry-commited', (function(_this) {
        return function(event, url, inPage, replaceEntry) {
          var currentEntry;
          if (_this.inPageIndex > -1 && !inPage) {
            _this.inPageIndex = -1;
          } else if (_this.inPageIndex === -1 && inPage) {
            _this.inPageIndex = _this.currentIndex;
          }
          if (_this.pendingIndex >= 0) {
            _this.currentIndex = _this.pendingIndex;
            _this.pendingIndex = -1;
            return _this.history[_this.currentIndex] = url;
          } else if (replaceEntry) {
            return _this.history[_this.currentIndex] = url;
          } else {
            _this.history = _this.history.slice(0, _this.currentIndex + 1);
            currentEntry = _this.history[_this.currentIndex];
            if ((currentEntry != null ? currentEntry.url : void 0) !== url) {
              _this.currentIndex++;
              return _this.history.push(url);
            }
          }
        };
      })(this));
    }

    NavigationController.prototype.loadUrl = function(url, options) {
      if (options == null) {
        options = {};
      }
      this.pendingIndex = -1;
      this.webContents._loadUrl(url, options);
      return this.webContents.emit('load-url', url, options);
    };

    NavigationController.prototype.getUrl = function() {
      if (this.currentIndex === -1) {
        return '';
      } else {
        return this.history[this.currentIndex];
      }
    };

    NavigationController.prototype.stop = function() {
      this.pendingIndex = -1;
      return this.webContents._stop();
    };

    NavigationController.prototype.reload = function() {
      this.pendingIndex = this.currentIndex;
      return this.webContents._loadUrl(this.getUrl(), {});
    };

    NavigationController.prototype.reloadIgnoringCache = function() {
      this.webContents._reloadIgnoringCache();
      return this.reload();
    };

    NavigationController.prototype.canGoBack = function() {
      return this.getActiveIndex() > 0;
    };

    NavigationController.prototype.canGoForward = function() {
      return this.getActiveIndex() < this.history.length - 1;
    };

    NavigationController.prototype.canGoToIndex = function(index) {
      return index >= 0 && index < this.history.length;
    };

    NavigationController.prototype.canGoToOffset = function(offset) {
      return this.canGoToIndex(this.currentIndex + offset);
    };

    NavigationController.prototype.clearHistory = function() {
      this.history = [];
      this.currentIndex = -1;
      this.pendingIndex = -1;
      return this.inPageIndex = -1;
    };

    NavigationController.prototype.goBack = function() {
      if (!this.canGoBack()) {
        return;
      }
      this.pendingIndex = this.getActiveIndex() - 1;
      if (this.inPageIndex > -1 && this.pendingIndex >= this.inPageIndex) {
        return this.webContents._goBack();
      } else {
        return this.webContents._loadUrl(this.history[this.pendingIndex], {});
      }
    };

    NavigationController.prototype.goForward = function() {
      if (!this.canGoForward()) {
        return;
      }
      this.pendingIndex = this.getActiveIndex() + 1;
      if (this.inPageIndex > -1 && this.pendingIndex >= this.inPageIndex) {
        return this.webContents._goForward();
      } else {
        return this.webContents._loadUrl(this.history[this.pendingIndex], {});
      }
    };

    NavigationController.prototype.goToIndex = function(index) {
      if (!this.canGoToIndex(index)) {
        return;
      }
      this.pendingIndex = index;
      return this.webContents._loadUrl(this.history[this.pendingIndex], {});
    };

    NavigationController.prototype.goToOffset = function(offset) {
      var pendingIndex;
      if (!this.canGoToOffset(offset)) {
        return;
      }
      pendingIndex = this.currentIndex + offset;
      if (this.inPageIndex > -1 && pendingIndex >= this.inPageIndex) {
        this.pendingIndex = pendingIndex;
        return this.webContents._goToOffset(offset);
      } else {
        return this.goToIndex(pendingIndex);
      }
    };

    NavigationController.prototype.getActiveIndex = function() {
      if (this.pendingIndex === -1) {
        return this.currentIndex;
      } else {
        return this.pendingIndex;
      }
    };

    NavigationController.prototype.length = function() {
      return this.history.length;
    };

    return NavigationController;

  })();

  module.exports = NavigationController;

}).call(this);
