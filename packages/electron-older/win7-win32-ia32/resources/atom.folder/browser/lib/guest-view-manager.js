// Generated by CoffeeScript 1.9.3
(function() {
  var attachGuest, createGuest, destroyGuest, embedderElementsMap, getNextInstanceId, guestInstances, ipc, moveLastToFirst, nextInstanceId, reverseEmbedderElementsMap, supportedWebViewEvents, webContents, webViewManager,
    slice = [].slice;

  ipc = require('ipc');

  webContents = require('web-contents');

  webViewManager = null;

  supportedWebViewEvents = ['load-commit', 'did-finish-load', 'did-fail-load', 'did-frame-finish-load', 'did-start-loading', 'did-stop-loading', 'did-get-response-details', 'did-get-redirect-request', 'dom-ready', 'console-message', 'new-window', 'close', 'crashed', 'gpu-crashed', 'plugin-crashed', 'destroyed', 'page-title-set', 'page-favicon-updated', 'enter-html-full-screen', 'leave-html-full-screen'];

  nextInstanceId = 0;

  guestInstances = {};

  embedderElementsMap = {};

  reverseEmbedderElementsMap = {};

  moveLastToFirst = function(list) {
    return list.unshift(list.pop());
  };

  getNextInstanceId = function(webContents) {
    return ++nextInstanceId;
  };

  createGuest = function(embedder, params) {
    var destroy, destroyEvents, event, fn, guest, i, id, j, len, len1, listeners;
    if (webViewManager == null) {
      webViewManager = process.atomBinding('web_view_manager');
    }
    id = getNextInstanceId(embedder);
    guest = webContents.create({
      isGuest: true,
      embedder: embedder
    });
    guestInstances[id] = {
      guest: guest,
      embedder: embedder
    };
    destroyEvents = ['destroyed', 'crashed', 'did-navigate-to-different-page'];
    destroy = function() {
      if (guestInstances[id] != null) {
        return destroyGuest(embedder, id);
      }
    };
    for (i = 0, len = destroyEvents.length; i < len; i++) {
      event = destroyEvents[i];
      embedder.once(event, destroy);
      listeners = embedder._events[event];
      if (Array.isArray(listeners)) {
        moveLastToFirst(listeners);
      }
    }
    guest.once('destroyed', function() {
      var j, len1, results;
      results = [];
      for (j = 0, len1 = destroyEvents.length; j < len1; j++) {
        event = destroyEvents[j];
        results.push(embedder.removeListener(event, destroy));
      }
      return results;
    });
    guest.once('did-attach', function() {
      var opts;
      params = this.attachParams;
      delete this.attachParams;
      this.viewInstanceId = params.instanceId;
      this.setSize({
        normal: {
          width: params.elementWidth,
          height: params.elementHeight
        },
        enableAutoSize: params.autosize,
        min: {
          width: params.minwidth,
          height: params.minheight
        },
        max: {
          width: params.maxwidth,
          height: params.maxheight
        }
      });
      if (params.src) {
        opts = {};
        if (params.httpreferrer) {
          opts.httpReferrer = params.httpreferrer;
        }
        if (params.useragent) {
          opts.userAgent = params.useragent;
        }
        this.loadUrl(params.src, opts);
      }
      if (params.allowtransparency != null) {
        return this.setAllowTransparency(params.allowtransparency);
      }
    });
    fn = function(event) {
      return guest.on(event, function() {
        var _, args;
        _ = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        return embedder.send.apply(embedder, ["ATOM_SHELL_GUEST_VIEW_INTERNAL_DISPATCH_EVENT-" + guest.viewInstanceId, event].concat(slice.call(args)));
      });
    };
    for (j = 0, len1 = supportedWebViewEvents.length; j < len1; j++) {
      event = supportedWebViewEvents[j];
      fn(event);
    }
    guest.on('ipc-message-host', function(_, packed) {
      var args, channel;
      channel = packed[0], args = 2 <= packed.length ? slice.call(packed, 1) : [];
      return embedder.send.apply(embedder, ["ATOM_SHELL_GUEST_VIEW_INTERNAL_IPC_MESSAGE-" + guest.viewInstanceId, channel].concat(slice.call(args)));
    });
    guest.on('size-changed', function() {
      var _, args;
      _ = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      return embedder.send.apply(embedder, ["ATOM_SHELL_GUEST_VIEW_INTERNAL_SIZE_CHANGED-" + guest.viewInstanceId].concat(slice.call(args)));
    });
    return id;
  };

  attachGuest = function(embedder, elementInstanceId, guestInstanceId, params) {
    var guest, key, oldGuestInstanceId, ref;
    guest = guestInstances[guestInstanceId].guest;
    key = (embedder.getId()) + "-" + elementInstanceId;
    oldGuestInstanceId = embedderElementsMap[key];
    if (oldGuestInstanceId != null) {
      if (oldGuestInstanceId === guestInstanceId) {
        return;
      }
      if (guestInstances[oldGuestInstanceId] == null) {
        return;
      }
      destroyGuest(embedder, oldGuestInstanceId);
    }
    webViewManager.addGuest(guestInstanceId, elementInstanceId, embedder, guest, {
      nodeIntegration: params.nodeintegration,
      plugins: params.plugins,
      disableWebSecurity: params.disablewebsecurity,
      preloadUrl: (ref = params.preload) != null ? ref : ''
    });
    guest.attachParams = params;
    embedderElementsMap[key] = guestInstanceId;
    return reverseEmbedderElementsMap[guestInstanceId] = key;
  };

  destroyGuest = function(embedder, id) {
    var key;
    webViewManager.removeGuest(embedder, id);
    guestInstances[id].guest.destroy();
    delete guestInstances[id];
    key = reverseEmbedderElementsMap[id];
    if (key != null) {
      delete reverseEmbedderElementsMap[id];
      return delete embedderElementsMap[key];
    }
  };

  ipc.on('ATOM_SHELL_GUEST_VIEW_MANAGER_CREATE_GUEST', function(event, params, requestId) {
    return event.sender.send("ATOM_SHELL_RESPONSE_" + requestId, createGuest(event.sender, params));
  });

  ipc.on('ATOM_SHELL_GUEST_VIEW_MANAGER_ATTACH_GUEST', function(event, elementInstanceId, guestInstanceId, params) {
    return attachGuest(event.sender, elementInstanceId, guestInstanceId, params);
  });

  ipc.on('ATOM_SHELL_GUEST_VIEW_MANAGER_DESTROY_GUEST', function(event, id) {
    return destroyGuest(event.sender, id);
  });

  ipc.on('ATOM_SHELL_GUEST_VIEW_MANAGER_SET_SIZE', function(event, id, params) {
    var ref;
    return (ref = guestInstances[id]) != null ? ref.guest.setSize(params) : void 0;
  });

  ipc.on('ATOM_SHELL_GUEST_VIEW_MANAGER_SET_ALLOW_TRANSPARENCY', function(event, id, allowtransparency) {
    var ref;
    return (ref = guestInstances[id]) != null ? ref.guest.setAllowTransparency(allowtransparency) : void 0;
  });

  exports.getGuest = function(id) {
    var ref;
    return (ref = guestInstances[id]) != null ? ref.guest : void 0;
  };

  exports.getEmbedder = function(id) {
    var ref;
    return (ref = guestInstances[id]) != null ? ref.embedder : void 0;
  };

}).call(this);
