// Generated by CoffeeScript 1.9.3
(function() {
  var convertToMenuTemplate, createFileSelectorElement, createMenu, pathToHtml5FileObject, showFileChooserDialog;

  window.onload = function() {
    var inspectorFrame;
    inspectorFrame = document.getElementById('inspector-app-iframe').contentWindow;
    inspectorFrame["eval"]('InspectorFrontendHost.showContextMenuAtPoint = parent.createMenu');
    return inspectorFrame["eval"]('WebInspector.createFileSelectorElement = parent.createFileSelectorElement');
  };

  convertToMenuTemplate = function(items) {
    var fn, i, item, len, template;
    template = [];
    fn = function(item) {
      var transformed;
      transformed = item.type === 'subMenu' ? {
        type: 'submenu',
        label: item.label,
        enabled: item.enabled,
        submenu: convertToMenuTemplate(item.subItems)
      } : item.type === 'separator' ? {
        type: 'separator'
      } : item.type === 'checkbox' ? {
        type: 'checkbox',
        label: item.label,
        enabled: item.enabled,
        checked: item.checked
      } : {
        type: 'normal',
        label: item.label,
        enabled: item.enabled
      };
      if (item.id != null) {
        transformed.click = function() {
          return DevToolsAPI.contextMenuItemSelected(item.id);
        };
      }
      return template.push(transformed);
    };
    for (i = 0, len = items.length; i < len; i++) {
      item = items[i];
      fn(item);
    }
    return template;
  };

  createMenu = function(x, y, items, document) {
    var Menu, menu, remote;
    remote = require('remote');
    Menu = remote.require('menu');
    menu = Menu.buildFromTemplate(convertToMenuTemplate(items));
    return setImmediate(function() {
      menu.popup(remote.getCurrentWindow());
      return DevToolsAPI.contextMenuCleared();
    });
  };

  showFileChooserDialog = function(callback) {
    var dialog, files, remote;
    remote = require('remote');
    dialog = remote.require('dialog');
    files = dialog.showOpenDialog(remote.getCurrentWindow(), null);
    if (files != null) {
      return callback(pathToHtml5FileObject(files[0]));
    }
  };

  pathToHtml5FileObject = function(path) {
    var blob, fs;
    fs = require('fs');
    blob = new Blob([fs.readFileSync(path)]);
    blob.name = path;
    return blob;
  };

  createFileSelectorElement = function(callback) {
    var fileSelectorElement;
    fileSelectorElement = document.createElement('span');
    fileSelectorElement.style.display = 'none';
    fileSelectorElement.click = showFileChooserDialog.bind(this, callback);
    return fileSelectorElement;
  };

  window.createMenu = createMenu;

  window.createFileSelectorElement = createFileSelectorElement;

}).call(this);
